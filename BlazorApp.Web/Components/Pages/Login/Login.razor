@page "/Login"
@using BlazorApp.Domain.Requests
@using BlazorApp.Domain.Responses
@using BlazorApp.Web.Authentication
@using BlazorApp.Web.Components.Layout
@using Microsoft.AspNetCore.Components.Authorization
@layout EmptyLayout
@inject ApiClient ApiClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="container login-container">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <div class="card shadow">
                <h3 class="text-center mb-4">Login</h3>
                <EditForm Model="loginRequest" FormName="Login" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="mb-3">
                        <label class="form-label" for="email">Email</label>
                        <InputText id="email" placeholder="Enter your email" class="form-control" @bind-Value="loginRequest.Email"></InputText>
                    </div>
                    <div class="mb-3">
                        <label class="form-label" for="password">Password</label>
                        <InputText id="password" class="form-control" placeholder="Enter your password" @bind-Value="loginRequest.Password"></InputText>
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="rememberMe">
                        <label class="form-check-label" for="rememberMe">Remember Me</label>
                    </div>
                    <Button Type="ButtonType.Submit" Class="btn btn-custom w-100">Login</Button>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    private UserLoginRequest loginRequest = new UserLoginRequest();
    private async Task HandleLogin()
    {
        var res = await ApiClient.PostAsync<ApiResponse<UserLoginResponse>, UserLoginRequest>("/api/auth", loginRequest);
        if (res != null && res.Data != null)
        {
            await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(res.Data.Token);
            NavigationManager.NavigateTo("/");
        }
    }
}
